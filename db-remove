#!/bin/bash

. "$(dirname "$(readlink -e "$0")")/config"
. "$(dirname "$(readlink -e "$0")")/db-functions"

if (( $# < 3 )); then
	msg "usage: %s <repo> <arch> <pkgname|pkgbase> ..." "${0##*/}"
	exit 1
fi

repo="$1"
arch="$2"
pkgbases=("${@:3}")

if ! check_repo_permission "$repo"; then
	die "You don't have permission to remove packages from %s" "$repo"
fi
if ! check_author; then
	die "You don't have a matching author mapping"
fi

if [[ $arch = any ]]; then
	tarches=("${ARCHES[@]}")
else
	tarches=("$arch")
fi

for tarch in "${tarches[@]}"; do
	repo_lock "$repo" "$tarch" || exit 1
done

declare -A remove_pkgbases
declare -A remove_pkgs
declare -A remove_debug_pkgs

for pkgbase in "${pkgbases[@]}"; do
	msg "Removing %s from [%s]..." "$pkgbase" "$repo"

	for tarch in "${tarches[@]}" any; do
		vcsrepo="$repo-$tarch"

		# check to remove whole pkgbase or parts of a split package
		if fetch_pkgbuild "${pkgbase}" && \
				_pkgver=$(pkgver_from_state_repo "${pkgbase}" "${vcsrepo}") && \
				mapfile -t pkgnames < <(source_pkgbuild "${pkgbase}" "${_pkgver}" && printf "%s\n" "${pkgname[@]}"); then
			array_append remove_pkgbases "${vcsrepo}" "${pkgbase}"
			array_append remove_pkgs "${tarch}" "${pkgnames[*]}"
		elif is_globfile "${FTP_BASE}/${repo}/os/${tarch}/${pkgbase}"-*-*-*.pkg.tar*; then
			warning "pkgbase %s not found in %s - removing only pkgname" "$pkgbase" "$vcsrepo"
			warning "If %s was a split package you have to pass its pkgbase to remove it completely!" "$pkgbase"
			array_append remove_pkgs "${tarch}" "${pkgbase}"
		fi

		# check to remove debug packages
		if is_globfile "${FTP_BASE}/${repo}-debug/os/${tarch}/${pkgbase}-debug"-*-*-*.pkg.tar*; then
			msg "Found debug package. Removing %s from [%s]..." "${pkgbase}-debug" "${repo}-debug"
			array_append remove_debug_pkgs "${tarch}" "${pkgbase}-debug"
		fi
	done
done

# remove binary repo packages
for key in "${!remove_pkgs[@]}"; do
	tarch=${key}
	read -ra pkgs <<< "${remove_pkgs[$key]}"
	arch_repo_modify remove "${repo}" "${tarch}" "${pkgs[@]}"
done

# remove binary repo debug packages
for key in "${!remove_debug_pkgs[@]}"; do
	tarch=${key}
	read -ra pkgs <<< "${remove_debug_pkgs[$key]}"
	arch_repo_modify remove "${repo}-debug" "${tarch}" "${pkgs[@]}"
done

# remove state repo entry
for key in "${!remove_pkgbases[@]}"; do
	vcsrepo=${key}
	read -ra pkgs <<< "${remove_pkgbases[$key]}"
	for pkgbase in "${pkgs[@]}"; do
		vcs_remove_package "${pkgbase}" "${vcsrepo}"
	done
done

# Remove all the locks we created
for tarch in "${tarches[@]}"; do
	repo_unlock "$repo" "$tarch"
done
